<div class="-flex -scroll -padding-16 -space-v-16">
    <div class="-layout-h -space-h-16">
        <div class="-layout-h -space-h-4 -center-center">
            <div class="icon -size-16 -color-green">
                <div class="-layout-h -center"><svg width="12" height="14" viewBox="0 0 12 14"><path d="M6 0S4.02 2.392 0 4.711v2.646s4.5-2.875 6.01-4.764C7.56 4.5 12 7.357 12 7.357V4.711C7.98 2.328 6 0 6 0z"></path><path d="M6 3.28S4.02 5.672 0 7.99v2.647s4.5-2.875 6.01-4.764C7.56 7.778 12 10.637 12 10.637V7.991C7.98 5.608 6 3.28 6 3.28z"></path><path d="M6 6.643s-1.98 2.392-6 4.711V14s4.5-2.875 6.01-4.763C7.56 11.142 12 14 12 14v-2.646c-4.02-2.383-6-4.71-6-4.71z"></path></svg></div>
            </div>
            <p class="-bold -font-size-14 -capitalize">hard</p>
        </div>
        <div class="-layout-h -space-h-4 -center-center">
            <div class="icon -size-16 -color-green">
                <div class="-layout-h -center"><svg width="16" height="16" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16zm-1.43-3c-1.642-.344-2.462-1.136-2.462-2.376V9.612c0-.688-.37-1.032-1.108-1.032V7.42c.739 0 1.108-.346 1.108-1.037V5.31c.013-.613.225-1.11.636-1.487.414-.378 1.023-.653 1.825-.823L7 3.9c-.574.163-.873.621-.896 1.374v1.109c0 .763-.421 1.301-1.265 1.615.844.313 1.265.853 1.265 1.62v1.103c.023.753.322 1.211.896 1.374L6.57 13zm2.86 0c1.642-.344 2.462-1.136 2.462-2.376V9.612c0-.688.37-1.032 1.108-1.032V7.42c-.739 0-1.108-.346-1.108-1.037V5.31c-.013-.613-.225-1.11-.636-1.487-.414-.378-1.023-.653-1.825-.823L9 3.9c.574.163.873.621.896 1.374v1.109c0 .763.421 1.301 1.265 1.615-.844.313-1.265.853-1.265 1.62v1.103c-.023.753-.322 1.211-.896 1.374l.43.905z"></path></svg></div>
            </div>
            <p class="-bold -font-size-14 -capitalize">codewriting</p>
        </div>
        <div class="-layout-h -space-h-4 -center-center">
            <div class="icon -size-16 -color-green">
                <div class="-layout-h -center"><svg width="16" height="16" viewBox="0 0 16 16"><path d="M13.33 6.1l-2.8.395-.477 1.58 2.004-.22L11.03 9.6l-1.476.13L8 14.876 6.425 9.73 4.948 9.6 3.923 7.854l2.003.22-.454-1.58-2.8-.396-1.318-2.075 5.53 1.01L8 9.548l1.117-4.51 5.53-1.012L13.33 6.1zM0 8c0 4.418 3.582 8 8 8 4.42 0 8-3.582 8-8 0-4.42-3.58-8-8-8-4.418 0-8 3.58-8 8z" fill-rule="evenodd"></path></svg></div>
            </div>
            <p class="-bold -font-size-14 -capitalize">4000</p>
        </div>
    </div>
    <div class="markdown -arial">
        <p>Thumbtack tries to identify spam coming from multiple user accounts by comparing job request descriptions and identifying clusters that have high similarity. Their data analysis engineers are testing out a new clusterization algorithm that uses
            the <a href="keyword://jaccard-index" target="_blank">Jaccard index</a>. As a prospective team member, you've been asked to implement this algorithm.</p>
        <p>You are given a list of <code>requests</code> and <code>ids</code> of the users who submitted them. Implement the following algorithm to identify possible spammers:</p>
        <ul>
            <li>first, split each request into a set of <em>words</em> and convert them to lowercase. We formally define a <em>word</em> as a substring consisting of English letters, such that characters to the left of the leftmost letter and to the right
                of the rightmost letter are not letters;</li>
            <li>next, calculate the <em>Jaccard index</em> of each pair of sets;</li>
            <li>divide the sets into clusters so that:
                <ul>
                    <li>each set belongs to some cluster;</li>
                    <li>if <em>Jaccard index</em> of two sets <code>A</code> and <code>B</code> is not less than the given <code>threshold</code> (meaning they are too similar), they belong to the same cluster. Note that if <code>A</code> and <code>B</code>                        as well as <code>B</code> and <code>C</code> satisfy this criteria, then <code>A</code>, <code>B</code> and <code>C</code> belong to the same cluster;</li>
                </ul>
            </li>
            <li>for each cluster that has more than one element, return the list of their author <code>ID</code>s in ascending order.</li>
        </ul>
        <p><span class="markdown--header" style="color:#2b3b52;font-size:1.4em">Example</span></p>
        <p>For</p>
        <pre><code>requests = ["I need a new window.",
            "I really, really want to replace my window!",
            "Replace my window.",
            "I want a new window.",
            "I want a new carpet, I want a new carpet, I want a new carpet.",
            "Replace my carpet"]
</code></pre>
        <p><code>ids = [374, 2845, 83, 1848, 1837, 1500]</code>, and<br>
            <code>threshold = 0.5</code>, the output should be<br>
            <code>spamClusterization(requests, ids, threshold) = [[83, 1500], [374, 1837, 1848]]</code>.</p>
        <p>The sets of <em>words</em> obtained after the first step are:</p>
        <ul>
            <li><code>{"i", "need", "a", "new", "window"}</code> - 5 elements;</li>
            <li><code>{"i", "really", "want", "to", "replace", "my", "window"}</code> - 7 elements;</li>
            <li><code>{"replace", "my", "window"}</code> - 3 elements;</li>
            <li><code>{"i", "want", "a", "new", "window"}</code> - 5 elements;</li>
            <li><code>{"i", "want", "a", "new", "carpet"}</code> - 5 elements (note that a <em>set</em> consists only of unique elements);</li>
            <li><code>{"replace", "my", "carpet"}</code> - 3 elements.</li>
        </ul>
        <p>Here's a table of <em>Jaccard indices</em> for each pair of request (there are <code>6</code> requests in total):</p>
        <table>
            <tbody>
                <tr>
                    <th></th>
                    <th>1</th>
                    <th>2</th>
                    <th>3</th>
                    <th>4</th>
                    <th>5</th>
                    <th>6</th>
                </tr>
                <tr>
                    <td>1</td>
                    <td>-</td>
                    <td>2/10 = 1/5</td>
                    <td>1/7 </td>
                    <td>4/6 = 2/3</td>
                    <td>3/7</td>
                    <td>0/8 = 0</td>
                </tr>
                <tr>
                    <td>2</td>
                    <td>1/5</td>
                    <td>-</td>
                    <td>3/7</td>
                    <td>3/9 = 1/3</td>
                    <td>2/10 = 1/5</td>
                    <td>2/8 = 1/4</td>
                </tr>
                <tr>
                    <td>3</td>
                    <td>1/7</td>
                    <td>3/7</td>
                    <td>-</td>
                    <td>1/7</td>
                    <td> 0/8 = 0</td>
                    <td>2/4 = 1/2</td>
                </tr>
                <tr>
                    <td>4</td>
                    <td>4/6</td>
                    <td>3/9</td>
                    <td>1/7</td>
                    <td>-</td>
                    <td>4/6 = 2/3</td>
                    <td>0/8 = 0</td>
                </tr>
                <tr>
                    <td>5</td>
                    <td>3/7</td>
                    <td>1/5</td>
                    <td>0</td>
                    <td>2/3</td>
                    <td>-</td>
                    <td>1/7</td>
                </tr>
                <tr>
                    <td>6</td>
                    <td>0</td>
                    <td>1/4</td>
                    <td>1/2</td>
                    <td>0</td>
                    <td>1/7</td>
                    <td>-</td>
                </tr>
            </tbody>
        </table>
        <p>Since <code>threshold = 0.5</code>, there are two clusters with more than one element. The first one contains the third and the sixth requests, and the second one contains requests number one, four and five (since <em>Jaccard index</em> of the
            first and fourth requests and of the fourth and fifth requests is larger than <code>threshold</code>, they all belong to the same cluster). After sorting their author ids, we arrive at the answer.</p>
        <p><span class="markdown--header" style="color:#2b3b52;font-size:1.4em">Input/Output</span></p>
        <ul>
            <li>
                <p><strong>[execution time limit] 5 seconds (ts)</strong></p>
            </li>
            <li>
                <p><strong>[input] array.string requests</strong></p>
                <p>A non-empty list of requests. Each request is a non-empty string consisting of English letters, punctuation marks and whitespace characters.</p>
                <p><em>Guaranteed constraints:</em><br>
                    <code>1 ≤ requests.length ≤ 10</code>,<br>
                    <code>1 ≤ requests[i].length ≤ 65</code>.</p>
            </li>
            <li>
                <p><strong>[input] array.integer ids</strong></p>
                <p>Array of unique elements of the same size as <code>requests</code>.</p>
                <p><em>Guaranteed constraints:</em><br>
                    <code>1 ≤ ids.length ≤ 10</code>,<br>
                    <code>1 ≤ ids[i] ≤ 3000</code>.</p>
            </li>
            <li>
                <p><strong>[input] float threshold</strong></p>
                <p><em>Guaranteed constraints:</em><br>
                    <code>0.0 ≤ threshold ≤ 1.0</code>.</p>
            </li>
            <li>
                <p><strong>[output] array.array.integer</strong></p>
                <p>Each element of the output should contain <code>ids</code> of users whose requests ended up in the same cluster sorted in ascending order. Output array elements should be sorted by the smallest <code>ids</code> they contain.</p>
            </li>
        </ul>
        <p><strong>[TypeScript] Syntax Tips</strong></p>
        <pre><code class="language-typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">helloWorld</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">string</span> </span>{
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"This prints to the console when you Run Tests"</span>);
    <span class="hljs-keyword">return</span> <span class="hljs-string">"Hello, "</span> + name;
}

</code></pre>
    </div>
</div>