<div class="-flex -scroll -padding-16 -space-v-16">
    <div class="-layout-h -space-h-16">
        <div class="-layout-h -space-h-4 -center-center">
            <div class="icon -size-16 -color-green">
                <div class="-layout-h -center"><svg width="12" height="14" viewBox="0 0 12 14"><path d="M6 2.28S4.02 4.672 0 6.99v2.647s4.5-2.875 6.01-4.764C7.56 6.778 12 9.637 12 9.637V6.991C7.98 4.608 6 2.28 6 2.28z"></path><path d="M6 5.643s-1.98 2.392-6 4.711V13s4.5-2.875 6.01-4.763C7.56 10.142 12 13 12 13v-2.646c-4.02-2.383-6-4.71-6-4.71v-.001z"></path></svg></div>
            </div>
            <p class="-bold -font-size-14 -capitalize">medium</p>
        </div>
        <div class="-layout-h -space-h-4 -center-center">
            <div class="icon -size-16 -color-green">
                <div class="-layout-h -center"><svg width="16" height="16" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16zm-1.43-3c-1.642-.344-2.462-1.136-2.462-2.376V9.612c0-.688-.37-1.032-1.108-1.032V7.42c.739 0 1.108-.346 1.108-1.037V5.31c.013-.613.225-1.11.636-1.487.414-.378 1.023-.653 1.825-.823L7 3.9c-.574.163-.873.621-.896 1.374v1.109c0 .763-.421 1.301-1.265 1.615.844.313 1.265.853 1.265 1.62v1.103c.023.753.322 1.211.896 1.374L6.57 13zm2.86 0c1.642-.344 2.462-1.136 2.462-2.376V9.612c0-.688.37-1.032 1.108-1.032V7.42c-.739 0-1.108-.346-1.108-1.037V5.31c-.013-.613-.225-1.11-.636-1.487-.414-.378-1.023-.653-1.825-.823L9 3.9c.574.163.873.621.896 1.374v1.109c0 .763.421 1.301 1.265 1.615-.844.313-1.265.853-1.265 1.62v1.103c-.023.753-.322 1.211-.896 1.374l.43.905z"></path></svg></div>
            </div>
            <p class="-bold -font-size-14 -capitalize">codewriting</p>
        </div>
        <div class="-layout-h -space-h-4 -center-center">
            <div class="icon -size-16 -color-green">
                <div class="-layout-h -center"><svg width="16" height="16" viewBox="0 0 16 16"><path d="M13.33 6.1l-2.8.395-.477 1.58 2.004-.22L11.03 9.6l-1.476.13L8 14.876 6.425 9.73 4.948 9.6 3.923 7.854l2.003.22-.454-1.58-2.8-.396-1.318-2.075 5.53 1.01L8 9.548l1.117-4.51 5.53-1.012L13.33 6.1zM0 8c0 4.418 3.582 8 8 8 4.42 0 8-3.582 8-8 0-4.42-3.58-8-8-8-4.418 0-8 3.58-8 8z" fill-rule="evenodd"></path></svg></div>
            </div>
            <p class="-bold -font-size-14 -capitalize">2000</p>
        </div>
    </div>
    <div class="markdown -arial">
        <p>When visualizing market data over a long period of time, it is often helpful to build an Open-high-low-close (OHLC) chart. However, to build an OHLC chart you first need to prepare some data. For each financial instrument consider each day when
            it was traded, and find the following prices the instrument had that day:</p>
        <ul>
            <li><em>open price</em>: the price of the first trade of the day;</li>
            <li><em>high price</em>: the highest trade of the day;</li>
            <li><em>low price</em>: the lowest trade of the day;</li>
            <li><em>close price</em>: the price of the last trade of the day.</li>
        </ul>
        <p>Given a stream of trade data ordered by time, write a program to compute the OHLC by day and instrument (see output section for the format details).<br> If two trades happen to have equal timestamps, then their order is determined by the order
            of their timestamps in the <code>timestamp</code> array.</p>
        <p><span class="markdown--header" style="color:#2b3b52;font-size:1.4em">Example</span></p>
        <p>For</p>
        <pre><code>timestamp = [1450625399, 1450625400, 1450625500, 
             1450625550, 1451644200, 1451690100, 1451691000]
</code></pre>
        <p><code>instrument = ["HPQ", "HPQ", "HPQ", "HPQ", "AAPL", "HPQ", "GOOG"]</code>,<br>
            <code>side = ["sell", "buy", "buy", "sell", "buy", "buy", "buy"]</code>,<br>
            <code>price = [10, 20.3, 35.5, 8.65, 20, 10, 100.35]</code>, and<br>
            <code>size = [10, 1, 2, 3, 5, 1, 10]</code>, the output should be</p>
        <pre><code>dailyOHLC(timestamp, instrument, side, price, size) = 
[["2015-12-20", "HPQ", "10.00", "35.50", "8.65", "8.65"],
 ["2016-01-01", "AAPL", "20.00", "20.00", "20.00", "20.00"],
 ["2016-01-01", "GOOG", "100.35", "100.35", "100.35", "100.35"],
 ["2016-01-01", "HPQ", "10.00", "10.00", "10.00", "10.00"]]
</code></pre>
        <p><span class="markdown--header" style="color:#2b3b52;font-size:1.4em">Input/Output</span></p>
        <ul>
            <li>
                <p><strong>[execution time limit] 4 seconds (py3)</strong></p>
            </li>
            <li>
                <p><strong>[input] array.integer timestamp</strong></p>
                <p>A nondecreasing sequence of positive integers. <code>timestamp[i]</code> stands for the <a href="https://en.wikipedia.org/wiki/Unix_time" target="_blank">Unix time</a> when the <code>i<sup>th</sup></code> trade was made.</p>
                <p><em>Guaranteed constraints:</em><br>
                    <code>1 ≤ timestamp.length ≤ 50</code>,<br>
                    <code>666 ≤ timestamp[i] &lt; 2 · 10<sup>9</sup></code>.</p>
            </li>
            <li>
                <p><strong>[input] array.string instrument</strong></p>
                <p>Array of the same length as <code>timestamp</code>. <code>instrument[i]</code> is the <em>ticker symbol</em> (identifier) for the financial instrument taking part in the <code>i<sup>th</sup></code> trade.</p>
                <p><em>Guaranteed constraints:</em><br>
                    <code>instrument.length = timestamp.length</code>,<br>
                    <code>1 ≤ instrument[i].length ≤ 4</code>.</p>
            </li>
            <li>
                <p><strong>[input] array.string side</strong></p>
                <p>Array of the same length as <code>timestamp</code>. <code>side[i]</code> equals either <code>"buy"</code> or <code>"sell"</code> depending on whether <code>instrument[i]</code> was bought or sold during the <code>i<sup>th</sup></code>                    trade.</p>
                <p><em>Guaranteed constraints:</em><br>
                    <code>side.length = timestamp.length</code>.</p>
            </li>
            <li>
                <p><strong>[input] array.float price</strong></p>
                <p>Array of the same length as <code>timestamp</code>. <code>price[i]</code> is the price of the <code>instrument[i]</code> during the <code>i<sup>th</sup></code> trade. It is guaranteed that <code>price[i]</code> has no more than two digits
                    after the decimal point.</p>
                <p><em>Guaranteed constraints:</em><br>
                    <code>price.length = timestamp.length</code>,<br>
                    <code>0.5 ≤ price[i] ≤ 100.5</code>.</p>
            </li>
            <li>
                <p><strong>[input] array.integer size</strong></p>
                <p>Array of the same length as <code>timestamp</code>. <code>size[i]</code> equals the number of shares of the <code>instrument[i]</code> traded during the <code>i<sup>th</sup></code> trade.</p>
                <p><em>Guaranteed constraints:</em><br>
                    <code>size.length = timestamp.length</code>,<br>
                    <code>1 ≤ size[i] ≤ 5 · 10<sup>5</sup></code>.</p>
            </li>
            <li>
                <p><strong>[output] array.array.string</strong></p>
                <p>The <code>i<sup>th</sup></code> row of the output should contain the following elements:</p>
                <ul>
                    <li><code>output[i][0]</code> - <em>local server date</em> in the <code>YYYY-MM-DD</code> format;</li>
                    <li><code>output[i][1]</code> - a <em>ticker symbol</em> for some instrument;</li>
                    <li><code>output[i][2]</code> - a string corresponding to the <em>open price</em>;</li>
                    <li><code>output[i][3]</code> - a string corresponding to the <em>high price</em>;</li>
                    <li><code>output[i][4]</code> - a string corresponding to the <em>low price</em>;</li>
                    <li><code>output[i][5]</code> - a string corresponding to the <em>close price</em>.</li>
                </ul>
                <p>Each string corresponding to the price should contain exactly two digits after the decimal point and at least one digit before.</p>
                <p>For each unique pair of a date and an instrument present in the inputs, such that there was a trade of that instrument on that day, there should be exactly one row in the output.</p>
                <p>Output rows should be ordered by dates. Rows corresponding to the same date should be ordered in <a href="keyword://lexicographical-order-for-strings" target="_blank">lexicographical order</a> for <em>ticker symbols</em>.</p>
            </li>
        </ul>
        <p><strong>[Python 3] Syntax Tips</strong></p>
        <pre><code class="language-python"><span class="hljs-comment"># Prints help message to the console</span>
<span class="hljs-comment"># Returns a string</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">helloWorld</span><span class="hljs-params">(name)</span>:</span>
    print(<span class="hljs-string">"This prints to the console when you Run Tests"</span>)
    <span class="hljs-keyword">return</span> <span class="hljs-string">"Hello, "</span> + name

</code></pre>
    </div>
</div>