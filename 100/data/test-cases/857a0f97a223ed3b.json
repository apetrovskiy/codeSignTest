{
  "uid" : "857a0f97a223ed3b",
  "name" : "test_combinationSum[input_array23-13-(1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5)(1 1 1 1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)]",
  "fullName" : "src.test.java.challenges.a20200530_combinationSum.test_combinationSum#test_combinationSum",
  "historyId" : "4fd47c4a4ad1aca12c513b2cd456597f",
  "time" : {
    "start" : 1622009562999,
    "stop" : 1622009563000,
    "duration" : 1
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert '(1 1 1 1 1 1...)(3 5 5)(5 8)' == '(1 1)(1 1)(1... 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)\n  + (1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5)(1 1 1 1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)",
  "statusTrace" : "input_array = [7, 1, 9, 5, 1, 8, ...], sum = 13\nexpected_result = '(1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5...1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)'\n\n    @pytest.mark.parametrize(\n        \"input_array,sum,expected_result\",\n        [\n            ([2, 3, 5, 9], 9, \"(2 2 2 3)(2 2 5)(3 3 3)(9)\"),\n            ([2, 4, 6, 8], 8, \"(2 2 2 2)(2 2 4)(2 6)(4 4)(8)\"),\n            ([8, 1, 8, 6, 8\n              ], 12, \"(1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 6)(1 1 1 1 8)(6 6)\"),\n            ([7, 2, 6, 5], 16,\n             \"(2 2 2 2 2 2 2 2)(2 2 2 2 2 6)(2 2 2 5 5)(2 2 5 7)(2 2 6 6)(2 7 7)(5 5 6)\"\n             ),\n            # 5\n            ([6, 5, 7, 1, 8, 2, 9, 9, 7, 7, 9\n              ], 6, \"(1 1 1 1 1 1)(1 1 1 1 2)(1 1 2 2)(1 5)(2 2 2)(6)\"),\n            ([5, 2, 2, 6], 3, \"Empty\"),\n            ([4, 6, 4, 2], 7, \"Empty\"),\n            ([8, 7, 1], 22,\n             \"(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 7)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 8)(1 1 1 1 1 1 1 1 7 7)(1 1 1 1 1 1 1 7 8)(1 1 1 1 1 1 8 8)(1 7 7 7)(7 7 8)\"\n             ),\n            # 9\n            ([6, 5, 6, 3, 3, 4, 3, 2, 2, 9, 9], 24,\n             \"(2 2 2 2 2 2 2 2 2 2 2 2)(2 2 2 2 2 2 2 2 2 2 4)(2 2 2 2 2 2 2 2 2 3 3)(2 2 2 2 2 2 2 2 2 6)(2 2 2 2 2 2 2 2 3 5)(2 2 2 2 2 2 2 2 4 4)(2 2 2 2 2 2 2 3 3 4)(2 2 2 2 2 2 2 4 6)(2 2 2 2 2 2 2 5 5)(2 2 2 2 2 2 3 3 3 3)(2 2 2 2 2 2 3 3 6)(2 2 2 2 2 2 3 4 5)(2 2 2 2 2 2 3 9)(2 2 2 2 2 2 4 4 4)(2 2 2 2 2 2 6 6)(2 2 2 2 2 3 3 3 5)(2 2 2 2 2 3 3 4 4)(2 2 2 2 2 3 5 6)(2 2 2 2 2 4 4 6)(2 2 2 2 2 4 5 5)(2 2 2 2 2 5 9)(2 2 2 2 3 3 3 3 4)(2 2 2 2 3 3 4 6)(2 2 2 2 3 3 5 5)(2 2 2 2 3 4 4 5)(2 2 2 2 3 4 9)(2 2 2 2 4 4 4 4)(2 2 2 2 4 6 6)(2 2 2 2 5 5 6)(2 2 2 3 3 3 3 3 3)(2 2 2 3 3 3 3 6)(2 2 2 3 3 3 4 5)(2 2 2 3 3 3 9)(2 2 2 3 3 4 4 4)(2 2 2 3 3 6 6)(2 2 2 3 4 5 6)(2 2 2 3 5 5 5)(2 2 2 3 6 9)(2 2 2 4 4 4 6)(2 2 2 4 4 5 5)(2 2 2 4 5 9)(2 2 2 6 6 6)(2 2 2 9 9)(2 2 3 3 3 3 3 5)(2 2 3 3 3 3 4 4)(2 2 3 3 3 5 6)(2 2 3 3 4 4 6)(2 2 3 3 4 5 5)(2 2 3 3 5 9)(2 2 3 4 4 4 5)(2 2 3 4 4 9)(2 2 3 5 6 6)(2 2 4 4 4 4 4)(2 2 4 4 6 6)(2 2 4 5 5 6)(2 2 5 5 5 5)(2 2 5 6 9)(2 3 3 3 3 3 3 4)(2 3 3 3 3 4 6)(2 3 3 3 3 5 5)(2 3...\"\n             ),\n            ([6, 5, 5, 7], 1, \"Empty\"),\n            ([7, 3, 9, 8, 4, 5], 8, \"(3 5)(4 4)(8)\"),\n            ([1, 1, 1, 3, 7, 3], 15,\n             \"(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 1 1 7)(1 1 1 1 1 1 3 3 3)(1 1 1 1 1 3 7)(1 1 1 3 3 3 3)(1 1 3 3 7)(1 7 7)(3 3 3 3 3)\"\n             ),\n            # 13\n            ([6, 8, 7, 7, 9], 14, \"(6 8)(7 7)\"),\n            ([7, 3, 9, 2, 7, 7], 2, \"(2)\"),\n            ([6, 3, 7], 18, \"(3 3 3 3 3 3)(3 3 3 3 6)(3 3 6 6)(6 6 6)\"),\n            ([3, 8, 3, 9], 17, \"(3 3 3 8)(8 9)\"),\n            # 17\n            ([4, 3, 1], 3, \"(1 1 1)(3)\"),\n            ([8, 6, 4, 7, 6, 5, 3, 6, 3], 4, \"(4)\"),\n            ([3, 9, 4], 20, \"(3 3 3 3 4 4)(3 4 4 9)(4 4 4 4 4)\"),\n            ([1, 8\n              ], 16, \"(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 8)(8 8)\"),\n            # 21\n            ([4, 7], 24, \"(4 4 4 4 4 4)\"),\n            ([2, 3, 7, 5, 3, 3, 8, 9, 6, 2], 1, \"Empty\"),\n            ([5, 9, 5, 7, 8], 13, \"(5 8)\"),\n            ([7, 1, 9, 5, 1, 8, 5, 3], 13,\n             \"(1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5)(1 1 1 1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)\"\n             ),\n            # 25\n            ([6, 3, 4, 8, 9, 8, 9, 2, 4, 8], 19,\n             \"(2 2 2 2 2 2 2 2 3)(2 2 2 2 2 2 3 4)(2 2 2 2 2 3 3 3)(2 2 2 2 2 3 6)(2 2 2 2 2 9)(2 2 2 2 3 4 4)(2 2 2 2 3 8)(2 2 2 3 3 3 4)(2 2 2 3 4 6)(2 2 2 4 9)(2 2 3 3 3 3 3)(2 2 3 3 3 6)(2 2 3 3 9)(2 2 3 4 4 4)(2 2 3 4 8)(2 2 3 6 6)(2 2 6 9)(2 3 3 3 4 4)(2 3 3 3 8)(2 3 4 4 6)(2 3 6 8)(2 4 4 9)(2 8 9)(3 3 3 3 3 4)(3 3 3 4 6)(3 3 4 9)(3 4 4 4 4)(3 4 4 8)(3 4 6 6)(3 8 8)(4 6 9)\"\n             ),\n            ([4, 7, 7, 1, 3, 2, 8, 8, 9, 3], 7,\n             \"(1 1 1 1 1 1 1)(1 1 1 1 1 2)(1 1 1 1 3)(1 1 1 2 2)(1 1 1 4)(1 1 2 3)(1 2 2 2)(1 2 4)(1 3 3)(2 2 3)(3 4)(7)\"\n             ),\n            ([8, 5], 4, \"Empty\"),\n            ([7, 1, 3, 1, 3, 4, 7, 3, 9, 6], 23,\n             \"(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 4)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 6)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 4)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 7)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 4 4)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 6)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 9)(1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 4)(1 1 1 1 1 1 1 1 1 1 1 1 1 3 7)(1 1 1 1 1 1 1 1 1 1 1 1 1 4 6)(1 1 1 1 1 1 1 1 1 1 1 1 3 4 4)(1 1 1 1 1 1 1 1 1 1 1 1 4 7)(1 1 1 1 1 1 1 1 1 1 1 3 3 3 3)(1 1 1 1 1 1 1 1 1 1 1 3 3 6)(1 1 1 1 1 1 1 1 1 1 1 3 9)(1 1 1 1 1 1 1 1 1 1 1 4 4 4)(1 1 1 1 1 1 1 1 1 1 1 6 6)(1 1 1 1 1 1 1 1 1 1 3 3 3 4)(1 1 1 1 1 1 1 1 1 1 3 3 7)(1 1 1 1 1 1 1 1 1 1 3 4 6)(1 1 1 1 1 1 1 1 1 1 4 9)(1 1 1 1 1 1 1 1 1 1 6 7)(1 1 1 1 1 1 1 1 1 3 3 4 4)(1 1 1 1 1 1 1 1 1 3 4 7)(1 1 1 1 1 1 1 1 1 4 4 6)(1 1 1 1 1 1 1 1 1 7 7)(1 1 1 1 1 1 1 1 3 3 3 3 3)(1 1 1 1 1 1 1 1 3 3 3 6)(1 1...\"\n             ),\n        ],\n    )\n    def test_combinationSum(input_array: List[int], sum: int,\n                            expected_result: str):\n>       assert expected_result == combinationSum(input_array, sum)\nE       AssertionError: assert '(1 1 1 1 1 1...)(3 5 5)(5 8)' == '(1 1)(1 1)(1... 1)(1 1)(1 1)'\nE         - (1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)\nE         + (1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5)(1 1 1 1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)\n\nsrc/test/java/challenges/a20200530_combinationSum/test_combinationSum.py:66: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "src.test.java.challenges.a20200530_combinationSum"
  }, {
    "name" : "suite",
    "value" : "test_combinationSum"
  }, {
    "name" : "host",
    "value" : "fv-az190-850"
  }, {
    "name" : "thread",
    "value" : "2047-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "src.test.java.challenges.a20200530_combinationSum.test_combinationSum"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "expected_result",
    "value" : "'(1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5)(1 1 1 1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)'"
  }, {
    "name" : "input_array",
    "value" : "[7, 1, 9, 5, 1, 8, 5, 3]"
  }, {
    "name" : "sum",
    "value" : "13"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 42,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 42
      },
      "items" : [ {
        "uid" : "eed3cc3ac6f11e2b",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/99//#testresult/eed3cc3ac6f11e2b",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(1 1 1 1 1 1...)(3 5 5)(5 8)' == '(1 1)(1 1)(1... 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)\n  + (1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5)(1 1 1 1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)",
        "time" : {
          "start" : 1621953167829,
          "stop" : 1621953167830,
          "duration" : 1
        }
      }, {
        "uid" : "b2a1dacb262f3a77",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/98//#testresult/b2a1dacb262f3a77",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(1 1 1 1 1 1...)(3 5 5)(5 8)' == '(1 1)(1 1)(1... 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)\n  + (1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5)(1 1 1 1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)",
        "time" : {
          "start" : 1621950735064,
          "stop" : 1621950735064,
          "duration" : 0
        }
      }, {
        "uid" : "b90e383395d8ab30",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/96//#testresult/b90e383395d8ab30",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(1 1 1 1 1 1...)(3 5 5)(5 8)' == '(1 1)(1 1)(1... 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)\n  + (1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5)(1 1 1 1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)",
        "time" : {
          "start" : 1621949362610,
          "stop" : 1621949362610,
          "duration" : 0
        }
      }, {
        "uid" : "54a814fb7f96f67",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/95//#testresult/54a814fb7f96f67",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(1 1 1 1 1 1...)(3 5 5)(5 8)' == '(1 1)(1 1)(1... 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)\n  + (1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5)(1 1 1 1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)",
        "time" : {
          "start" : 1621531932306,
          "stop" : 1621531932306,
          "duration" : 0
        }
      }, {
        "uid" : "a9ce55d27f835497",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/94//#testresult/a9ce55d27f835497",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(1 1 1 1 1 1...)(3 5 5)(5 8)' == '(1 1)(1 1)(1... 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)\n  + (1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5)(1 1 1 1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)",
        "time" : {
          "start" : 1620951308923,
          "stop" : 1620951308924,
          "duration" : 1
        }
      }, {
        "uid" : "b15792c0fb6f3bef",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/92//#testresult/b15792c0fb6f3bef",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(1 1 1 1 1 1...)(3 5 5)(5 8)' == '(1 1)(1 1)(1... 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)\n  + (1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5)(1 1 1 1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)",
        "time" : {
          "start" : 1620951226718,
          "stop" : 1620951226718,
          "duration" : 0
        }
      }, {
        "uid" : "3fa688094a686bbb",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/91//#testresult/3fa688094a686bbb",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(1 1 1 1 1 1...)(3 5 5)(5 8)' == '(1 1)(1 1)(1... 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)\n  + (1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5)(1 1 1 1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)",
        "time" : {
          "start" : 1620951214546,
          "stop" : 1620951214546,
          "duration" : 0
        }
      }, {
        "uid" : "e861d886a18874f4",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/90//#testresult/e861d886a18874f4",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(1 1 1 1 1 1...)(3 5 5)(5 8)' == '(1 1)(1 1)(1... 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)\n  + (1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5)(1 1 1 1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)",
        "time" : {
          "start" : 1620951121948,
          "stop" : 1620951121949,
          "duration" : 1
        }
      }, {
        "uid" : "7d85bbc289ea7910",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/89//#testresult/7d85bbc289ea7910",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(1 1 1 1 1 1...)(3 5 5)(5 8)' == '(1 1)(1 1)(1... 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)\n  + (1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5)(1 1 1 1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)",
        "time" : {
          "start" : 1620950096836,
          "stop" : 1620950096836,
          "duration" : 0
        }
      }, {
        "uid" : "64ee0282064b6a41",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/88//#testresult/64ee0282064b6a41",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(1 1 1 1 1 1...)(3 5 5)(5 8)' == '(1 1)(1 1)(1... 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)\n  + (1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5)(1 1 1 1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)",
        "time" : {
          "start" : 1620933877513,
          "stop" : 1620933877514,
          "duration" : 1
        }
      }, {
        "uid" : "bb922945c39c6c14",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/87//#testresult/bb922945c39c6c14",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(1 1 1 1 1 1...)(3 5 5)(5 8)' == '(1 1)(1 1)(1... 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)\n  + (1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5)(1 1 1 1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)",
        "time" : {
          "start" : 1620917155558,
          "stop" : 1620917155558,
          "duration" : 0
        }
      }, {
        "uid" : "e9fdd4c82db733d3",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/86//#testresult/e9fdd4c82db733d3",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(1 1 1 1 1 1...)(3 5 5)(5 8)' == '(1 1)(1 1)(1... 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)\n  + (1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5)(1 1 1 1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)",
        "time" : {
          "start" : 1620892762993,
          "stop" : 1620892762993,
          "duration" : 0
        }
      }, {
        "uid" : "ccade76d5130a174",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/85//#testresult/ccade76d5130a174",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(1 1 1 1 1 1...)(3 5 5)(5 8)' == '(1 1)(1 1)(1... 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)\n  + (1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5)(1 1 1 1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)",
        "time" : {
          "start" : 1620888190064,
          "stop" : 1620888190064,
          "duration" : 0
        }
      }, {
        "uid" : "433a3eec68f7db33",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/84//#testresult/433a3eec68f7db33",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(1 1 1 1 1 1...)(3 5 5)(5 8)' == '(1 1)(1 1)(1... 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)\n  + (1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5)(1 1 1 1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)",
        "time" : {
          "start" : 1620887626871,
          "stop" : 1620887626871,
          "duration" : 0
        }
      }, {
        "uid" : "14cf0b4343d86ff6",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/83//#testresult/14cf0b4343d86ff6",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(1 1 1 1 1 1...)(3 5 5)(5 8)' == '(1 1)(1 1)(1... 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)\n  + (1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5)(1 1 1 1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)",
        "time" : {
          "start" : 1620764607916,
          "stop" : 1620764607916,
          "duration" : 0
        }
      }, {
        "uid" : "3b9e4869c1598042",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/82//#testresult/3b9e4869c1598042",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(1 1 1 1 1 1...)(3 5 5)(5 8)' == '(1 1)(1 1)(1... 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)\n  + (1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5)(1 1 1 1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)",
        "time" : {
          "start" : 1620720719451,
          "stop" : 1620720719451,
          "duration" : 0
        }
      }, {
        "uid" : "9d08a38ad3c20a7d",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/81//#testresult/9d08a38ad3c20a7d",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(1 1 1 1 1 1...)(3 5 5)(5 8)' == '(1 1)(1 1)(1... 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)\n  + (1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5)(1 1 1 1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)",
        "time" : {
          "start" : 1620719097771,
          "stop" : 1620719097771,
          "duration" : 0
        }
      }, {
        "uid" : "898e8cbc3ec06d37",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/80//#testresult/898e8cbc3ec06d37",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(1 1 1 1 1 1...)(3 5 5)(5 8)' == '(1 1)(1 1)(1... 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)\n  + (1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5)(1 1 1 1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)",
        "time" : {
          "start" : 1620663603603,
          "stop" : 1620663603604,
          "duration" : 1
        }
      }, {
        "uid" : "24bd549cc204a233",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/79//#testresult/24bd549cc204a233",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(1 1 1 1 1 1...)(3 5 5)(5 8)' == '(1 1)(1 1)(1... 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)\n  + (1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5)(1 1 1 1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)",
        "time" : {
          "start" : 1620660718861,
          "stop" : 1620660718862,
          "duration" : 1
        }
      }, {
        "uid" : "55d7c3d3a77c4d1d",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/78//#testresult/55d7c3d3a77c4d1d",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(1 1 1 1 1 1...)(3 5 5)(5 8)' == '(1 1)(1 1)(1... 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)(1 1)\n  + (1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5)(1 1 1 1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)",
        "time" : {
          "start" : 1620660373608,
          "stop" : 1620660373608,
          "duration" : 0
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "857a0f97a223ed3b.json",
  "parameterValues" : [ "'(1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5)(1 1 1 1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)'", "[7, 1, 9, 5, 1, 8, 5, 3]", "13" ]
}