{
  "uid" : "deff5e7d1f48b27",
  "name" : "test_combinationSum[input_array10-8-(3 5)(4 4)(8)]",
  "fullName" : "src.test.java.challenges.a20200530_combinationSum.test_combinationSum#test_combinationSum",
  "historyId" : "ae0e9fe62842dee0d3d9fdcf255dd581",
  "time" : {
    "start" : 1620892762910,
    "stop" : 1620892762911,
    "duration" : 1
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert '(3 5)(4 4)(8)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (3 5)(4 4)(8)",
  "statusTrace" : "input_array = [7, 3, 9, 8, 4, 5], sum = 8, expected_result = '(3 5)(4 4)(8)'\n\n    @pytest.mark.parametrize(\n        \"input_array,sum,expected_result\",\n        [\n            ([2, 3, 5, 9], 9, \"(2 2 2 3)(2 2 5)(3 3 3)(9)\"),\n            ([2, 4, 6, 8], 8, \"(2 2 2 2)(2 2 4)(2 6)(4 4)(8)\"),\n            ([8, 1, 8, 6, 8], 12, \"(1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 6)(1 1 1 1 8)(6 6)\"),\n            ([7, 2, 6, 5], 16, \"(2 2 2 2 2 2 2 2)(2 2 2 2 2 6)(2 2 2 5 5)(2 2 5 7)(2 2 6 6)(2 7 7)(5 5 6)\"),\n            # 5\n            ([6, 5, 7, 1, 8, 2, 9, 9, 7, 7, 9], 6, \"(1 1 1 1 1 1)(1 1 1 1 2)(1 1 2 2)(1 5)(2 2 2)(6)\"),\n            ([5, 2, 2, 6], 3, \"Empty\"),\n            ([4, 6, 4, 2], 7, \"Empty\"),\n            ([8, 7, 1], 22, \"(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 7)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 8)(1 1 1 1 1 1 1 1 7 7)(1 1 1 1 1 1 1 7 8)(1 1 1 1 1 1 8 8)(1 7 7 7)(7 7 8)\"),\n            # 9\n            ([6, 5, 6, 3, 3, 4, 3, 2, 2, 9, 9], 24, \"(2 2 2 2 2 2 2 2 2 2 2 2)(2 2 2 2 2 2 2 2 2 2 4)(2 2 2 2 2 2 2 2 2 3 3)(2 2 2 2 2 2 2 2 2 6)(2 2 2 2 2 2 2 2 3 5)(2 2 2 2 2 2 2 2 4 4)(2 2 2 2 2 2 2 3 3 4)(2 2 2 2 2 2 2 4 6)(2 2 2 2 2 2 2 5 5)(2 2 2 2 2 2 3 3 3 3)(2 2 2 2 2 2 3 3 6)(2 2 2 2 2 2 3 4 5)(2 2 2 2 2 2 3 9)(2 2 2 2 2 2 4 4 4)(2 2 2 2 2 2 6 6)(2 2 2 2 2 3 3 3 5)(2 2 2 2 2 3 3 4 4)(2 2 2 2 2 3 5 6)(2 2 2 2 2 4 4 6)(2 2 2 2 2 4 5 5)(2 2 2 2 2 5 9)(2 2 2 2 3 3 3 3 4)(2 2 2 2 3 3 4 6)(2 2 2 2 3 3 5 5)(2 2 2 2 3 4 4 5)(2 2 2 2 3 4 9)(2 2 2 2 4 4 4 4)(2 2 2 2 4 6 6)(2 2 2 2 5 5 6)(2 2 2 3 3 3 3 3 3)(2 2 2 3 3 3 3 6)(2 2 2 3 3 3 4 5)(2 2 2 3 3 3 9)(2 2 2 3 3 4 4 4)(2 2 2 3 3 6 6)(2 2 2 3 4 5 6)(2 2 2 3 5 5 5)(2 2 2 3 6 9)(2 2 2 4 4 4 6)(2 2 2 4 4 5 5)(2 2 2 4 5 9)(2 2 2 6 6 6)(2 2 2 9 9)(2 2 3 3 3 3 3 5)(2 2 3 3 3 3 4 4)(2 2 3 3 3 5 6)(2 2 3 3 4 4 6)(2 2 3 3 4 5 5)(2 2 3 3 5 9)(2 2 3 4 4 4 5)(2 2 3 4 4 9)(2 2 3 5 6 6)(2 2 4 4 4 4 4)(2 2 4 4 6 6)(2 2 4 5 5 6)(2 2 5 5 5 5)(2 2 5 6 9)(2 3 3 3 3 3 3 4)(2 3 3 3 3 4 6)(2 3 3 3 3 5 5)(2 3...\"),\n            ([6, 5, 5, 7], 1, \"Empty\"),\n            ([7, 3, 9, 8, 4, 5], 8, \"(3 5)(4 4)(8)\"),\n            ([1, 1, 1, 3, 7, 3], 15, \"(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 1 1 7)(1 1 1 1 1 1 3 3 3)(1 1 1 1 1 3 7)(1 1 1 3 3 3 3)(1 1 3 3 7)(1 7 7)(3 3 3 3 3)\"),\n            # 13\n            ([6, 8, 7, 7, 9], 14, \"(6 8)(7 7)\"),\n            ([7, 3, 9, 2, 7, 7], 2, \"(2)\"),\n            ([6, 3, 7], 18, \"(3 3 3 3 3 3)(3 3 3 3 6)(3 3 6 6)(6 6 6)\"),\n            ([3, 8, 3, 9], 17, \"(3 3 3 8)(8 9)\"),\n            # 17\n            ([4, 3, 1], 3, \"(1 1 1)(3)\"),\n            ([8, 6, 4, 7, 6, 5, 3, 6, 3], 4, \"(4)\"),\n            ([3, 9, 4], 20, \"(3 3 3 3 4 4)(3 4 4 9)(4 4 4 4 4)\"),\n            ([1, 8], 16, \"(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 8)(8 8)\"),\n            # 21\n            ([4, 7], 24, \"(4 4 4 4 4 4)\"),\n            ([2, 3, 7, 5, 3, 3, 8, 9, 6, 2], 1, \"Empty\"),\n            ([5, 9, 5, 7, 8], 13, \"(5 8)\"),\n            ([7, 1, 9, 5, 1, 8, 5, 3], 13, \"(1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5)(1 1 1 1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)\"),\n            # 25\n            ([6, 3, 4, 8, 9, 8, 9, 2, 4, 8], 19, \"(2 2 2 2 2 2 2 2 3)(2 2 2 2 2 2 3 4)(2 2 2 2 2 3 3 3)(2 2 2 2 2 3 6)(2 2 2 2 2 9)(2 2 2 2 3 4 4)(2 2 2 2 3 8)(2 2 2 3 3 3 4)(2 2 2 3 4 6)(2 2 2 4 9)(2 2 3 3 3 3 3)(2 2 3 3 3 6)(2 2 3 3 9)(2 2 3 4 4 4)(2 2 3 4 8)(2 2 3 6 6)(2 2 6 9)(2 3 3 3 4 4)(2 3 3 3 8)(2 3 4 4 6)(2 3 6 8)(2 4 4 9)(2 8 9)(3 3 3 3 3 4)(3 3 3 4 6)(3 3 4 9)(3 4 4 4 4)(3 4 4 8)(3 4 6 6)(3 8 8)(4 6 9)\"),\n            ([4, 7, 7, 1, 3, 2, 8, 8, 9, 3], 7, \"(1 1 1 1 1 1 1)(1 1 1 1 1 2)(1 1 1 1 3)(1 1 1 2 2)(1 1 1 4)(1 1 2 3)(1 2 2 2)(1 2 4)(1 3 3)(2 2 3)(3 4)(7)\"),\n            ([8, 5], 4, \"Empty\"),\n            ([7, 1, 3, 1, 3, 4, 7, 3, 9, 6], 23, \"(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 4)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 6)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 4)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 7)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 4 4)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 6)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 9)(1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 4)(1 1 1 1 1 1 1 1 1 1 1 1 1 3 7)(1 1 1 1 1 1 1 1 1 1 1 1 1 4 6)(1 1 1 1 1 1 1 1 1 1 1 1 3 4 4)(1 1 1 1 1 1 1 1 1 1 1 1 4 7)(1 1 1 1 1 1 1 1 1 1 1 3 3 3 3)(1 1 1 1 1 1 1 1 1 1 1 3 3 6)(1 1 1 1 1 1 1 1 1 1 1 3 9)(1 1 1 1 1 1 1 1 1 1 1 4 4 4)(1 1 1 1 1 1 1 1 1 1 1 6 6)(1 1 1 1 1 1 1 1 1 1 3 3 3 4)(1 1 1 1 1 1 1 1 1 1 3 3 7)(1 1 1 1 1 1 1 1 1 1 3 4 6)(1 1 1 1 1 1 1 1 1 1 4 9)(1 1 1 1 1 1 1 1 1 1 6 7)(1 1 1 1 1 1 1 1 1 3 3 4 4)(1 1 1 1 1 1 1 1 1 3 4 7)(1 1 1 1 1 1 1 1 1 4 4 6)(1 1 1 1 1 1 1 1 1 7 7)(1 1 1 1 1 1 1 1 3 3 3 3 3)(1 1 1 1 1 1 1 1 3 3 3 6)(1 1...\"),\n        ],\n    )\n    def test_combinationSum(input_array: List[int], sum: int, expected_result: str):\n>       assert expected_result == combinationSum(input_array, sum)\nE       AssertionError: assert '(3 5)(4 4)(8)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\nE         - (1 1)(1 1)(1 1)(1 1)(1 1)\nE         + (3 5)(4 4)(8)\n\nsrc/test/java/challenges/a20200530_combinationSum/test_combinationSum.py:46: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "src.test.java.challenges.a20200530_combinationSum"
  }, {
    "name" : "suite",
    "value" : "test_combinationSum"
  }, {
    "name" : "host",
    "value" : "fv-az193-513"
  }, {
    "name" : "thread",
    "value" : "1869-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "src.test.java.challenges.a20200530_combinationSum.test_combinationSum"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "expected_result",
    "value" : "'(3 5)(4 4)(8)'"
  }, {
    "name" : "input_array",
    "value" : "[7, 3, 9, 8, 4, 5]"
  }, {
    "name" : "sum",
    "value" : "8"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 30,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 30
      },
      "items" : [ {
        "uid" : "dbb11ce2fea07d12",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/85//#testresult/dbb11ce2fea07d12",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(3 5)(4 4)(8)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (3 5)(4 4)(8)",
        "time" : {
          "start" : 1620888189979,
          "stop" : 1620888189979,
          "duration" : 0
        }
      }, {
        "uid" : "ab7e59d12b21c355",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/84//#testresult/ab7e59d12b21c355",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(3 5)(4 4)(8)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (3 5)(4 4)(8)",
        "time" : {
          "start" : 1620887626785,
          "stop" : 1620887626785,
          "duration" : 0
        }
      }, {
        "uid" : "9efa9236b163f1ca",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/83//#testresult/9efa9236b163f1ca",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(3 5)(4 4)(8)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (3 5)(4 4)(8)",
        "time" : {
          "start" : 1620764607830,
          "stop" : 1620764607831,
          "duration" : 1
        }
      }, {
        "uid" : "8c501cab03e1993c",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/82//#testresult/8c501cab03e1993c",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(3 5)(4 4)(8)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (3 5)(4 4)(8)",
        "time" : {
          "start" : 1620720719372,
          "stop" : 1620720719372,
          "duration" : 0
        }
      }, {
        "uid" : "ce581d1b03a1ec18",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/81//#testresult/ce581d1b03a1ec18",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(3 5)(4 4)(8)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (3 5)(4 4)(8)",
        "time" : {
          "start" : 1620719097676,
          "stop" : 1620719097677,
          "duration" : 1
        }
      }, {
        "uid" : "530eb77e28af439",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/80//#testresult/530eb77e28af439",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(3 5)(4 4)(8)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (3 5)(4 4)(8)",
        "time" : {
          "start" : 1620663603524,
          "stop" : 1620663603524,
          "duration" : 0
        }
      }, {
        "uid" : "5f28f16de195d914",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/79//#testresult/5f28f16de195d914",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(3 5)(4 4)(8)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (3 5)(4 4)(8)",
        "time" : {
          "start" : 1620660718762,
          "stop" : 1620660718762,
          "duration" : 0
        }
      }, {
        "uid" : "bc6c6de71c090422",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/78//#testresult/bc6c6de71c090422",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(3 5)(4 4)(8)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (3 5)(4 4)(8)",
        "time" : {
          "start" : 1620660373516,
          "stop" : 1620660373517,
          "duration" : 1
        }
      }, {
        "uid" : "ef909b221244b90d",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/77//#testresult/ef909b221244b90d",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(3 5)(4 4)(8)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (3 5)(4 4)(8)",
        "time" : {
          "start" : 1620634842323,
          "stop" : 1620634842324,
          "duration" : 1
        }
      }, {
        "uid" : "e0f34fcaaee90f26",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/76//#testresult/e0f34fcaaee90f26",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(3 5)(4 4)(8)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (3 5)(4 4)(8)",
        "time" : {
          "start" : 1620634246404,
          "stop" : 1620634246404,
          "duration" : 0
        }
      }, {
        "uid" : "54248c00cad91c90",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/75//#testresult/54248c00cad91c90",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(3 5)(4 4)(8)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (3 5)(4 4)(8)",
        "time" : {
          "start" : 1620633862288,
          "stop" : 1620633862289,
          "duration" : 1
        }
      }, {
        "uid" : "8c03cec2440cac76",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/74//#testresult/8c03cec2440cac76",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(3 5)(4 4)(8)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (3 5)(4 4)(8)",
        "time" : {
          "start" : 1620632837506,
          "stop" : 1620632837506,
          "duration" : 0
        }
      }, {
        "uid" : "cf9fca39005bdb4",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/73//#testresult/cf9fca39005bdb4",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(3 5)(4 4)(8)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (3 5)(4 4)(8)",
        "time" : {
          "start" : 1620588771474,
          "stop" : 1620588771475,
          "duration" : 1
        }
      }, {
        "uid" : "39856c08ae5b2101",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/72//#testresult/39856c08ae5b2101",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(3 5)(4 4)(8)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (3 5)(4 4)(8)",
        "time" : {
          "start" : 1620587343615,
          "stop" : 1620587343615,
          "duration" : 0
        }
      }, {
        "uid" : "c4190628ac265f62",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/71//#testresult/c4190628ac265f62",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(3 5)(4 4)(8)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (3 5)(4 4)(8)",
        "time" : {
          "start" : 1620582483255,
          "stop" : 1620582483255,
          "duration" : 0
        }
      }, {
        "uid" : "fd37ae513628f82b",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/70//#testresult/fd37ae513628f82b",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(3 5)(4 4)(8)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (3 5)(4 4)(8)",
        "time" : {
          "start" : 1620582063354,
          "stop" : 1620582063355,
          "duration" : 1
        }
      }, {
        "uid" : "a556457a28cb048d",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/69//#testresult/a556457a28cb048d",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(3 5)(4 4)(8)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (3 5)(4 4)(8)",
        "time" : {
          "start" : 1620581514276,
          "stop" : 1620581514276,
          "duration" : 0
        }
      }, {
        "uid" : "633541ad04e20860",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/68//#testresult/633541ad04e20860",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(3 5)(4 4)(8)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (3 5)(4 4)(8)",
        "time" : {
          "start" : 1620581310154,
          "stop" : 1620581310155,
          "duration" : 1
        }
      }, {
        "uid" : "37c243fcdba00129",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/67//#testresult/37c243fcdba00129",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(3 5)(4 4)(8)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (3 5)(4 4)(8)",
        "time" : {
          "start" : 1620580993474,
          "stop" : 1620580993474,
          "duration" : 0
        }
      }, {
        "uid" : "27362d87686e054",
        "reportUrl" : "https://apetrovskiy.github.io/codeSignTest/66//#testresult/27362d87686e054",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert '(3 5)(4 4)(8)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (3 5)(4 4)(8)",
        "time" : {
          "start" : 1620580708109,
          "stop" : 1620580708109,
          "duration" : 0
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "deff5e7d1f48b27.json",
  "parameterValues" : [ "'(3 5)(4 4)(8)'", "[7, 3, 9, 8, 4, 5]", "8" ]
}